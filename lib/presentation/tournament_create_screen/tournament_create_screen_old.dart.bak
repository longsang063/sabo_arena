import 'package:flutter/material.dart';
import '../../theme/app_theme.dart';
import '../../widgets/custom_app_bar.dart';

class TournamentCreateScreen extends StatefulWidget {
  final String? clubId;

  const TournamentCreateScreen({
    Key? key,
    this.clubId,
  }) : super(key: key);

  @override
  _TournamentCreateScreenState createState() => _TournamentCreateScreenState();
}

class _TournamentCreateScreenState extends State<TournamentCreateScreen> {
  final _formKey = GlobalKey<FormState>();
  
  // Form Controllers
  final TextEditingController _nameController = TextEditingController();
  final TextEditingController _descriptionController = TextEditingController();
  final TextEditingController _maxParticipantsController = TextEditingController();
  final TextEditingController _entryFeeController = TextEditingController();
  
  // Form State
  DateTime? _startDate;
  DateTime? _endDate;
  String _tournamentType = 'single_elimination';
  bool _isPublic = true;
  bool _isLoading = false;

  @override
  void dispose() {
    _nameController.dispose();
    _descriptionController.dispose();
    _maxParticipantsController.dispose();
    _entryFeeController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: AppTheme.backgroundLight,
      appBar: AppBar(
        backgroundColor: Colorshite,
        elevation: 0,
        leading: IconButton(
          icon: Icon(Icons.arrow_back, color: AppTheme.textPrimaryLight),
          onPressed: () => Navigator.pop(context),
        ),
        title: Text(
          'Tạo giải đấu',
          style: TextStyle(
            color: AppTheme.textPrimaryLight,
            fontSize: 18,
            fontWeight: FontWeight600,
          ),
        ),
        actions: [
          TextButton(
            onPressed: _isLoading ? null : _createTournament,
            child: Text(
              'Tạo',
              style: TextStyle(
                color: AppTheme.primaryLight,
                fontSize: 16,
                fontWeight: FontWeight600,
              ),
            ),
          ),
        ],
      ),
      body: _isLoading
          ? const Center(child: CircularProgressIndicator())
          : SingleChildScrollView(
              padding: EdgeInsets.all(16),
              child: Form(
                key: _formKey,
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    _buildBasicInfoSection(),
                    SizedBox(height: 24),
                    _buildDateTimeSection(),
                    SizedBox(height: 24),
                    _buildSettingsSection(),
                    SizedBox(height: 32),
                    _buildCreateButton(),
                  ],
                ),
              ),
            ),
    );
  }

  Widget _buildBasicInfoSection() {
    return Container(
      padding: EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colorshite,
        borderRadius: BorderRadius.circular(12),
        boxShadow: [
          BoxShadow(
            color: Colors.blackithOpacity(0.05),
            blurRadius: 8,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            'Thông tin cơ bản',
            style: TextStyle(
              fontSize: 18,
              fontWeight: FontWeight600,
              color: AppTheme.textPrimaryLight,
            ),
          ),
          SizedBox(height: 16),
          
          // Tournament Name
          TextFormField(
            controller: _nameController,
            decoration: InputDecoration(
              labelText: 'Tên giải đấu',
              hintText: 'VD: Golden Cup 2025',
              border: OutlineInputBorder(
                borderRadius: BorderRadius.circular(8),
              ),
              prefixIcon: Icon(Icons.emoji_events),
            ),
            validator: (value) {
              if (value?.isEmpty ?? true) {
                return 'Vui lòng nhập tên giải đấu';
              }
              return null;
            },
          ),
          
          SizedBox(height: 16),
          
          // Description
          TextFormField(
            controller: _descriptionController,
            maxLines: 3,
            decoration: InputDecoration(
              labelText: 'Mô tả',
              hintText: 'Mô tả về giải đấu...',
              border: OutlineInputBorder(
                borderRadius: BorderRadius.circular(8),
              ),
              prefixIcon: Icon(Icons.description),
            ),
          ),
          
          SizedBox(height: 16),
          
          // Max Participants
          TextFormField(
            controller: _maxParticipantsController,
            keyboardType: TextInputType.number,
            decoration: InputDecoration(
              labelText: 'Số người tham gia tối đa',
              hintText: '32',
              border: OutlineInputBorder(
                borderRadius: BorderRadius.circular(8),
              ),
              prefixIcon: Icon(Icons.people),
            ),
            validator: (value) {
              if (value?.isEmpty ?? true) {
                return 'Vui lòng nhập số người tham gia';
              }
              final number = int.tryParse(value!);
              if (number == null || number < 2) {
                return 'Số người tham gia phải từ 2 trở lên';
              }
              return null;
            },
          ),
          
          SizedBox(height: 16),
          
          // Entry Fee
          TextFormField(
            controller: _entryFeeController,
            keyboardType: TextInputType.number,
            decoration: InputDecoration(
              labelText: 'Phí tham gia (VND)',
              hintText: '100000',
              border: OutlineInputBorder(
                borderRadius: BorderRadius.circular(8),
              ),
              prefixIcon: Icon(Icons.monetization_on),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildDateTimeSection() {
    return Container(
      padding: EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colorshite,
        borderRadius: BorderRadius.circular(12),
        boxShadow: [
          BoxShadow(
            color: Colors.blackithOpacity(0.05),
            blurRadius: 8,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            'Thời gian tổ chức',
            style: TextStyle(
              fontSize: 18,
              fontWeight: FontWeight600,
              color: AppTheme.textPrimaryLight,
            ),
          ),
          SizedBox(height: 16),
          
          Row(
            children: [
              Expanded(
                child: InkWell(
                  onTap: _selectStartDate,
                  child: Container(
                    padding: EdgeInsets.all(12),
                    decoration: BoxDecoration(
                      border: Border.all(color: Colors.grey),
                      borderRadius: BorderRadius.circular(8),
                    ),
                    child: Row(
                      children: [
                        Icon(Icons.calendar_today, color: AppTheme.primaryLight),
                        SizedBox(width: 8),
                        Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Text(
                              'Ngày bắt đầu',
                              style: TextStyle(
                                fontSize: 12,
                                color: AppTheme.textSecondaryLight,
                              ),
                            ),
                            Text(
                              _startDate != null
                                  ? '${_startDate!.day}/${_startDate!.month}/${_startDate!.year}'
                                  : 'Chọn ngày',
                              style: TextStyle(
                                fontSize: 14,
                                color: AppTheme.textPrimaryLight,
                              ),
                            ),
                          ],
                        ),
                      ],
                    ),
                  ),
                ),
              ),
              SizedBox(width: 16),
              Expanded(
                child: InkWell(
                  onTap: _selectEndDate,
                  child: Container(
                    padding: EdgeInsets.all(12),
                    decoration: BoxDecoration(
                      border: Border.all(color: Colors.grey),
                      borderRadius: BorderRadius.circular(8),
                    ),
                    child: Row(
                      children: [
                        Icon(Icons.calendar_today, color: AppTheme.primaryLight),
                        SizedBox(width: 8),
                        Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Text(
                              'Ngày kết thúc',
                              style: TextStyle(
                                fontSize: 12,
                                color: AppTheme.textSecondaryLight,
                              ),
                            ),
                            Text(
                              _endDate != null
                                  ? '${_endDate!.day}/${_endDate!.month}/${_endDate!.year}'
                                  : 'Chọn ngày',
                              style: TextStyle(
                                fontSize: 14,
                                color: AppTheme.textPrimaryLight,
                              ),
                            ),
                          ],
                        ),
                      ],
                    ),
                  ),
                ),
              ),
            ],
          ),
        ],
      ),
    );
  }

  Widget _buildSettingsSection() {
    return Container(
      padding: EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colorshite,
        borderRadius: BorderRadius.circular(12),
        boxShadow: [
          BoxShadow(
            color: Colors.blackithOpacity(0.05),
            blurRadius: 8,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            'Cài đặt giải đấu',
            style: TextStyle(
              fontSize: 18,
              fontWeight: FontWeight600,
              color: AppTheme.textPrimaryLight,
            ),
          ),
          SizedBox(height: 16),
          
          // Tournament Type
          DropdownButtonFormField<String>(
            value: _tournamentType,
            decoration: InputDecoration(
              labelText: 'Loại giải đấu',
              border: OutlineInputBorder(
                borderRadius: BorderRadius.circular(8),
              ),
              prefixIcon: Icon(Icons.format_list_bulleted),
            ),
            items: const [
              DropdownMenuItem(
                value: 'single_elimination',
                child: Text('Loại trực tiếp'),
              ),
              DropdownMenuItem(
                value: 'round_robin',
                child: Text('Vòng tròn'),
              ),
              DropdownMenuItem(
                value: 'swiss',
                child: Text('Swiss System'),
              ),
            ],
            onChanged: (value) {
              setState(() {
                _tournamentType = value!;
              });
            },
          ),
          
          SizedBox(height: 16),
          
          // Public/Private Toggle
          SwitchListTile(
            title: Text('Giải đấu công khai'),
            subtitle: Text(
              _isPublic 
                  ? 'Mọi người có thể xem và đăng ký'
                  : 'Chỉ thành viên CLB mới có thể tham gia',
              style: TextStyle(fontSize: 12),
            ),
            value: _isPublic,
            onChanged: (value) {
              setState(() {
                _isPublic = value;
              });
            },
            activeColor: AppTheme.primaryLight,
          ),
        ],
      ),
    );
  }

  Widget _buildCreateButton() {
    return SizedBox(
      width: double.infinity,
      height: 48,
      child: ElevatedButton(
        onPressed: _isLoading ? null : _createTournament,
        style: ElevatedButton.styleFrom(
          backgroundColor: AppTheme.primaryLight,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(12),
          ),
        ),
        child: _isLoading
            ? const CircularProgressIndicator(color: Colorshite)
            : Text(
                'Tạo giải đấu',
                style: TextStyle(
                  fontSize: 16,
                  fontWeight: FontWeight600,
                  color: Colorshite,
                ),
              ),
      ),
    );
  }

  Future<void> _selectStartDate() async {
    final DateTime? picked = await showDatePicker(
      context: context,
      initialDate: _startDate ?? DateTime.now(),
      firstDate: DateTime.now(),
      lastDate: DateTime.now().add(const Duration(days: 365)),
    );
    if (picked != null && picked != _startDate) {
      setState(() {
        _startDate = picked;
        // Reset end date if it's before start date
        if (_endDate != null && _endDate!.isBefore(picked)) {
          _endDate = null;
        }
      });
    }
  }

  Future<void> _selectEndDate() async {
    if (_startDate == null) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Vui lòng chọn ngày bắt đầu trước')),
      );
      return;
    }
    
    final DateTime? picked = await showDatePicker(
      context: context,
      initialDate: _endDate ?? _startDate!.add(const Duration(days: 1)),
      firstDate: _startDate!,
      lastDate: _startDate!.add(const Duration(days: 90)),
    );
    if (picked != null && picked != _endDate) {
      setState(() {
        _endDate = picked;
      });
    }
  }

  Future<void> _createTournament() async {
    if (!_formKey.currentState!.validate()) return;
    
    if (_startDate == null) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Vui lòng chọn ngày bắt đầu')),
      );
      return;
    }

    setState(() {
      _isLoading = true;
    });

    try {
      // TODO: Implement tournament creation API call
      await Future.delayed(const Duration(seconds: 2)); // Simulate API call
      
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text('Tạo giải đấu thành công!'),
            backgroundColor: Colors.green,
          ),
        );
        Navigator.pop(context, true); // Return true to indicate success
      }
    } catch (error) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Có lỗi xảy ra: $error'),
            backgroundColor: Colors.red,
          ),
        );
      }
    } finally {
      if (mounted) {
        setState(() {
          _isLoading = false;
        });
      }
    }
  }
}
