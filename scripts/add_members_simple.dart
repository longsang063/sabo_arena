import 'dart:io';
import 'dart:math';
import 'package:supabase/supabase.dart';

Future<void> main() async {
  print('üîç KI·ªÇM TRA SCHEMA & TH√äM DATA TH√ÄNH VI√äN...\n');

  const supabaseUrl = 'https://mogjjvscxjwvhtpkrlqr.supabase.co';
  const serviceKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im1vZ2pqdnNjeGp3dmh0cGtybHFyIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1NzkxOTU4MCwiZXhwIjoyMDczNDk1NTgwfQ.T2ntQv-z2EL4mkGb9b3QyXM3dT8pAOFSPKvqWPd7Xoo';

  try {
    final supabase = SupabaseClient(supabaseUrl, serviceKey);
    print('‚úÖ K·∫øt n·ªëi Supabase th√†nh c√¥ng!\n');

    // 1. Ki·ªÉm tra schema c·ªßa c√°c b·∫£ng
    print('üîç 1. KI·ªÇM TRA SCHEMA:');
    print('======================');
    
    // Ki·ªÉm tra b·∫£ng user_profiles
    try {
      final userSample = await supabase
          .from('user_profiles')
          .select()
          .limit(1);
      print('   ‚úÖ user_profiles: ${userSample.length} records found');
    } catch (e) {
      print('   ‚ùå user_profiles: $e');
    }

    // Ki·ªÉm tra b·∫£ng club_members  
    try {
      final memberSample = await supabase
          .from('club_members')
          .select()
          .limit(1);
      print('   ‚úÖ club_members: ${memberSample.length} records found');
    } catch (e) {
      print('   ‚ùå club_members: $e');
    }

    // Ki·ªÉm tra b·∫£ng tournaments
    try {
      final tournamentSample = await supabase
          .from('tournaments')
          .select()
          .limit(1);
      print('   ‚úÖ tournaments: ${tournamentSample.length} records found');
    } catch (e) {
      print('   ‚ùå tournaments: $e');
    }

    // Ki·ªÉm tra b·∫£ng achievements
    try {
      final achievementSample = await supabase
          .from('achievements')
          .select()
          .limit(1);
      print('   ‚úÖ achievements: ${achievementSample.length} records found');
    } catch (e) {
      print('   ‚ùå achievements: $e');
    }
    
    print('');

    // 2. L·∫•y danh s√°ch clubs
    final clubs = await supabase
        .from('clubs')
        .select('id, name');
    
    print('üìã 2. CLUBS HI·ªÜN T·∫†I:');
    print('======================');
    for (final club in clubs) {
      print('   üè¢ ${club['name']} (ID: ${club['id']})');
    }
    print('');

    // 3. T·∫°o th√†nh vi√™n v·ªõi UUID th·ª±c
    print('üë• 3. T·∫†O TH√ÄNH VI√äN:');
    print('=====================');
    
    final memberTemplates = [
      // Golden Billiards Club Members
      {
        'full_name': 'Nguy·ªÖn VƒÉn Minh',
        'avatar_url': 'https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=200&h=200&fit=crop&crop=face',
        'bio': 'C·ª±u v√¥ ƒë·ªãch gi·∫£i bi-a qu·ªëc gia, chuy√™n gia English 8-ball',
        'location': 'Qu·∫≠n 1, TP.HCM',
      },
      {
        'full_name': 'Tr·∫ßn Th·ªã H∆∞∆°ng', 
        'avatar_url': 'https://images.unsplash.com/photo-1494790108755-2616b612b786?w=200&h=200&fit=crop&crop=face',
        'bio': 'N·ªØ tuy·ªÉn th·ªß xu·∫•t s·∫Øc, th√†nh t√≠ch ·∫•n t∆∞·ª£ng ·ªü gi·∫£i 9-ball',
        'location': 'Qu·∫≠n 1, TP.HCM',
      },
      {
        'full_name': 'L√™ Ho√†ng Nam',
        'avatar_url': 'https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=200&h=200&fit=crop&crop=face', 
        'bio': 'ƒêam m√™ bi-a carom, k·ªπ thu·∫≠t t·∫•n c√¥ng s·∫Øc b√©n',
        'location': 'Qu·∫≠n 1, TP.HCM',
      },
      {
        'full_name': 'Ph·∫°m Minh Tu·∫•n',
        'avatar_url': 'https://images.unsplash.com/photo-1500648767791-00dcc994a43e?w=200&h=200&fit=crop&crop=face',
        'bio': 'Chuy√™n gia snooker v·ªõi l·ªëi ch∆°i t√≠nh to√°n ch√≠nh x√°c', 
        'location': 'Qu·∫≠n 1, TP.HCM',
      },
      
      // SABO Arena Central Members  
      {
        'full_name': 'ƒê·∫∑ng Vi·ªát Anh',
        'avatar_url': 'https://images.unsplash.com/photo-1519345182560-3f2917c472ef?w=200&h=200&fit=crop&crop=face',
        'bio': 'T·ªï ch·ª©c v√† tham gia nhi·ªÅu gi·∫£i ƒë·∫•u chuy√™n nghi·ªáp',
        'location': 'Qu·∫≠n 3, TP.HCM',
      },
      {
        'full_name': 'V√µ Th·ªã Mai',
        'avatar_url': 'https://images.unsplash.com/photo-1438761681033-6461ffad8d80?w=200&h=200&fit=crop&crop=face',
        'bio': 'N·ªØ v·∫≠n ƒë·ªông vi√™n speed pool h√†ng ƒë·∫ßu mi·ªÅn Nam',
        'location': 'Qu·∫≠n 3, TP.HCM',
      },
      {
        'full_name': 'B√πi Thanh Long',
        'avatar_url': 'https://images.unsplash.com/photo-1506794778202-cad84cf45f1d?w=200&h=200&fit=crop&crop=face',
        'bio': 'T√†i nƒÉng tr·∫ª v·ªõi phong c√°ch ch∆°i nƒÉng ƒë·ªông',
        'location': 'Qu·∫≠n 3, TP.HCM',
      },
      {
        'full_name': 'Ho√†ng Th·ªã Lan',
        'avatar_url': 'https://images.unsplash.com/photo-1544005313-94ddf0286df2?w=200&h=200&fit=crop&crop=face',
        'bio': 'Ngh·ªá sƒ© bi-a v·ªõi nh·ªØng pha trick shot ngo·∫°n m·ª•c',
        'location': 'Qu·∫≠n 3, TP.HCM',
      },
    ];

    final random = Random();
    int memberCount = 0;
    List<String> createdUserIds = [];

    for (int i = 0; i < memberTemplates.length; i++) {
      final member = memberTemplates[i];
      
      try {
        // T·∫°o UUID th·ªß c√¥ng
        final userId = 'user_${DateTime.now().millisecondsSinceEpoch}_$i';
        
        await supabase
            .from('user_profiles')
            .insert({
              'id': userId,
              'full_name': member['full_name'],
              'avatar_url': member['avatar_url'],
              'bio': member['bio'], 
              'location': member['location'],
            });
        
        createdUserIds.add(userId);
        print('   ‚úÖ ${member['full_name']}');
        memberCount++;
        
      } catch (e) {
        print('   ‚ùå ${member['full_name']}: $e');
      }
    }
    
    print('   üìä T·∫°o th√†nh c√¥ng: $memberCount/${memberTemplates.length} th√†nh vi√™n\n');

    // 4. Th√™m v√†o club_members
    print('üè¢ 4. TH√äM V√ÄO CLUBS:');
    print('=====================');
    
    int clubMemberCount = 0;
    
    for (int i = 0; i < clubs.length; i++) {
      final club = clubs[i];
      final clubId = club['id'];
      final clubName = club['name'];
      
      print('   üè¢ $clubName:');
      
      // M·ªói club c√≥ 4 th√†nh vi√™n
      final startIndex = i * 4;
      for (int j = 0; j < 4 && (startIndex + j) < createdUserIds.length; j++) {
        final userId = createdUserIds[startIndex + j];
        final memberName = memberTemplates[startIndex + j]['full_name'];
        
        try {
          await supabase
              .from('club_members')
              .insert({
                'club_id': clubId,
                'user_id': userId,
                'role': j == 0 ? 'owner' : (j == 1 ? 'admin' : 'member'),
              });
          
          print('      ‚úÖ $memberName - ${j == 0 ? 'Owner' : (j == 1 ? 'Admin' : 'Member')}');
          clubMemberCount++;
          
        } catch (e) {
          print('      ‚ùå $memberName: $e');
        }
      }
      print('');
    }

    // 5. T·∫°o tournaments ƒë∆°n gi·∫£n  
    print('üèÜ 5. T·∫†O TOURNAMENTS:');
    print('======================');
    
    final tournamentTemplates = [
      {
        'name': 'Golden Cup 2025',
        'description': 'Gi·∫£i bi-a English 8-ball chuy√™n nghi·ªáp h√†ng nƒÉm v·ªõi gi·∫£i th∆∞·ªüng h·∫•p d·∫´n',
        'image_url': 'https://images.unsplash.com/photo-1571019613454-1cb2f99b2d8b?w=600&h=400&fit=crop',
        'max_participants': 32,
        'entry_fee': 500000,
        'prize_pool': 15000000,
        'start_date': '2025-10-15T09:00:00Z',
        'registration_deadline': '2025-10-10T23:59:59Z',
        'status': 'upcoming'
      },
      {
        'name': 'SABO Pro Series',
        'description': 'Gi·∫£i ƒë·∫•u chuy√™n nghi·ªáp v·ªõi format thi ƒë·∫•u hi·ªán ƒë·∫°i v√† livestream tr·ª±c ti·∫øp', 
        'image_url': 'https://images.unsplash.com/photo-1574631806042-182f10c4a017?w=600&h=400&fit=crop',
        'max_participants': 64,
        'entry_fee': 1000000,
        'prize_pool': 50000000,
        'start_date': '2025-12-01T10:00:00Z',
        'registration_deadline': '2025-11-25T23:59:59Z',
        'status': 'upcoming'
      }
    ];

    int tournamentCount = 0;
    
    for (int i = 0; i < clubs.length && i < tournamentTemplates.length; i++) {
      final club = clubs[i];
      final tournament = tournamentTemplates[i];
      
      try {
        await supabase
            .from('tournaments')
            .insert({
              'club_id': club['id'],
              'name': tournament['name'],
              'description': tournament['description'],
              'image_url': tournament['image_url'],
              'max_participants': tournament['max_participants'],
              'entry_fee': tournament['entry_fee'],
              'prize_pool': tournament['prize_pool'], 
              'start_date': tournament['start_date'],
              'registration_deadline': tournament['registration_deadline'],
              'status': tournament['status'],
            });
        
        print('   ‚úÖ ${tournament['name']} @ ${club['name']}');
        print('      üí∞ Prize: ${(tournament['prize_pool'] as int) / 1000000}M VND');
        tournamentCount++;
        
      } catch (e) {
        print('   ‚ùå ${tournament['name']}: $e');
      }
    }

    // 6. T·ªïng k·∫øt
    print('\nüìä 6. T·ªîNG K·∫æT:');
    print('================');
    print('   üë• Th√†nh vi√™n ƒë∆∞·ª£c t·∫°o: $memberCount');
    print('   üè¢ Club members ƒë∆∞·ª£c th√™m: $clubMemberCount');
    print('   üèÜ Tournaments ƒë∆∞·ª£c t·∫°o: $tournamentCount');
    
    // Ki·ªÉm tra d·ªØ li·ªáu cu·ªëi c√πng
    final finalCheck = await supabase
        .from('clubs')
        .select('id, name');
    
    for (final club in finalCheck) {
      final members = await supabase
          .from('club_members')
          .select('user_id')
          .eq('club_id', club['id']);
          
      final tournaments = await supabase
          .from('tournaments') 
          .select('name')
          .eq('club_id', club['id']);
      
      print('');
      print('   üè¢ ${club['name']}:');
      print('      üë• Members: ${members.length}');
      print('      üèÜ Tournaments: ${tournaments.length}');
    }

    print('\nüéâ HO√ÄN TH√ÄNH TH√äM DATA!');
    print('   Database ƒë√£ c√≥ th√™m th√†nh vi√™n v√† gi·∫£i ƒë·∫•u v·ªõi h√¨nh ·∫£nh ƒëa d·∫°ng');

  } catch (e) {
    print('‚ùå L·ªñI: $e');
    exit(1);
  }

  exit(0);
}