import 'dart:io';
import 'package:supabase/supabase.dart';

Future<void> main() async {
  print('üë•üèÜ TH√äM TH√ÄNH VI√äN & TOURNAMENTS CH√çNH X√ÅC...\n');

  const supabaseUrl = 'https://mogjjvscxjwvhtpkrlqr.supabase.co';
  const serviceKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im1vZ2pqdnNjeGp3dmh0cGtybHFyIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1NzkxOTU4MCwiZXhwIjoyMDczNDk1NTgwfQ.T2ntQv-z2EL4mkGb9b3QyXM3dT8pAOFSPKvqWPd7Xoo';

  try {
    final supabase = SupabaseClient(supabaseUrl, serviceKey);
    print('‚úÖ K·∫øt n·ªëi Supabase th√†nh c√¥ng!\n');

    // 1. Ki·ªÉm tra schema c·ªßa b·∫£ng users
    print('üîç 1. KI·ªÇM TRA SCHEMA USERS:');
    print('============================');
    
    final userSample = await supabase
        .from('users')
        .select()
        .limit(1);
    
    if (userSample.isNotEmpty) {
      print('   ‚úÖ B·∫£ng users t·ªìn t·∫°i');
      print('   üìù Columns: ${userSample.first.keys.join(', ')}');
    }
    print('');

    // 2. Ki·ªÉm tra schema tournaments
    final tournamentSample = await supabase
        .from('tournaments')
        .select()
        .limit(1);
    
    if (tournamentSample.isNotEmpty) {
      print('   ‚úÖ B·∫£ng tournaments t·ªìn t·∫°i');
      print('   üìù Columns: ${tournamentSample.first.keys.join(', ')}');
    }
    print('');

    // 3. L·∫•y danh s√°ch clubs
    final clubs = await supabase
        .from('clubs')
        .select('id, name');
    
    print('üìã 2. CLUBS HI·ªÜN T·∫†I:');
    print('======================');
    for (final club in clubs) {
      print('   üè¢ ${club['name']} (ID: ${club['id']})');
    }
    print('');

    // 4. T·∫°o th√†nh vi√™n m·ªõi v·ªõi ƒë√∫ng schema
    print('üë• 3. T·∫†O TH√ÄNH VI√äN M·ªöI:');
    print('==========================');
    
    final memberTemplates = [
      {
        'username': 'minh_pro_player',
        'email': 'minh.nguyen@example.com',
        'full_name': 'Nguy·ªÖn VƒÉn Minh',
        'avatar_url': 'https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=200&h=200&fit=crop&crop=face',
        'bio': 'C·ª±u v√¥ ƒë·ªãch gi·∫£i bi-a qu·ªëc gia, chuy√™n gia English 8-ball',
        'location': 'Qu·∫≠n 1, TP.HCM',
      },
      {
        'username': 'huong_champion',
        'email': 'huong.tran@example.com', 
        'full_name': 'Tr·∫ßn Th·ªã H∆∞∆°ng',
        'avatar_url': 'https://images.unsplash.com/photo-1494790108755-2616b612b786?w=200&h=200&fit=crop&crop=face',
        'bio': 'N·ªØ tuy·ªÉn th·ªß xu·∫•t s·∫Øc, th√†nh t√≠ch ·∫•n t∆∞·ª£ng ·ªü gi·∫£i 9-ball',
        'location': 'Qu·∫≠n 1, TP.HCM',
      },
      {
        'username': 'nam_carom_master',
        'email': 'nam.le@example.com',
        'full_name': 'L√™ Ho√†ng Nam',
        'avatar_url': 'https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=200&h=200&fit=crop&crop=face',
        'bio': 'ƒêam m√™ bi-a carom, k·ªπ thu·∫≠t t·∫•n c√¥ng s·∫Øc b√©n',
        'location': 'Qu·∫≠n 1, TP.HCM',
      },
      {
        'username': 'tuan_snooker_pro',
        'email': 'tuan.pham@example.com',
        'full_name': 'Ph·∫°m Minh Tu·∫•n',
        'avatar_url': 'https://images.unsplash.com/photo-1500648767791-00dcc994a43e?w=200&h=200&fit=crop&crop=face',
        'bio': 'Chuy√™n gia snooker v·ªõi l·ªëi ch∆°i t√≠nh to√°n ch√≠nh x√°c',
        'location': 'Qu·∫≠n 1, TP.HCM',
      },
      {
        'username': 'anh_tournament_king',
        'email': 'anh.dang@example.com',
        'full_name': 'ƒê·∫∑ng Vi·ªát Anh',
        'avatar_url': 'https://images.unsplash.com/photo-1519345182560-3f2917c472ef?w=200&h=200&fit=crop&crop=face',
        'bio': 'T·ªï ch·ª©c v√† tham gia nhi·ªÅu gi·∫£i ƒë·∫•u chuy√™n nghi·ªáp',
        'location': 'Qu·∫≠n 3, TP.HCM',
      },
      {
        'username': 'mai_speed_queen',
        'email': 'mai.vo@example.com',
        'full_name': 'V√µ Th·ªã Mai',
        'avatar_url': 'https://images.unsplash.com/photo-1438761681033-6461ffad8d80?w=200&h=200&fit=crop&crop=face',
        'bio': 'N·ªØ v·∫≠n ƒë·ªông vi√™n speed pool h√†ng ƒë·∫ßu mi·ªÅn Nam',
        'location': 'Qu·∫≠n 3, TP.HCM',
      },
      {
        'username': 'long_young_talent',
        'email': 'long.bui@example.com',
        'full_name': 'B√πi Thanh Long',
        'avatar_url': 'https://images.unsplash.com/photo-1506794778202-cad84cf45f1d?w=200&h=200&fit=crop&crop=face',
        'bio': 'T√†i nƒÉng tr·∫ª v·ªõi phong c√°ch ch∆°i nƒÉng ƒë·ªông',
        'location': 'Qu·∫≠n 3, TP.HCM',
      },
      {
        'username': 'lan_trick_artist',
        'email': 'lan.hoang@example.com',
        'full_name': 'Ho√†ng Th·ªã Lan',
        'avatar_url': 'https://images.unsplash.com/photo-1544005313-94ddf0286df2?w=200&h=200&fit=crop&crop=face',
        'bio': 'Ngh·ªá sƒ© bi-a v·ªõi nh·ªØng pha trick shot ngo·∫°n m·ª•c',
        'location': 'Qu·∫≠n 3, TP.HCM',
      },
    ];

    int memberCount = 0;
    List<String> createdUserIds = [];

    for (final member in memberTemplates) {
      try {
        final result = await supabase
            .from('users')
            .insert(member)
            .select('id')
            .single();
        
        createdUserIds.add(result['id']);
        print('   ‚úÖ ${member['full_name']} (@${member['username']})');
        memberCount++;
        
      } catch (e) {
        print('   ‚ùå ${member['full_name']}: $e');
      }
    }
    
    print('   üìä T·∫°o th√†nh c√¥ng: $memberCount/${memberTemplates.length} th√†nh vi√™n\n');

    // 5. Th√™m v√†o club_members
    print('üè¢ 4. TH√äM V√ÄO CLUBS:');
    print('=====================');
    
    int clubMemberCount = 0;
    
    for (int i = 0; i < clubs.length; i++) {
      final club = clubs[i];
      final clubId = club['id'];
      final clubName = club['name'];
      
      print('   üè¢ $clubName:');
      
      // M·ªói club c√≥ 4 th√†nh vi√™n
      final startIndex = i * 4;
      for (int j = 0; j < 4 && (startIndex + j) < createdUserIds.length; j++) {
        final userId = createdUserIds[startIndex + j];
        final memberName = memberTemplates[startIndex + j]['full_name'];
        
        try {
          await supabase
              .from('club_members')
              .insert({
                'club_id': clubId,
                'user_id': userId,
                'role': j == 0 ? 'owner' : (j == 1 ? 'admin' : 'member'),
              });
          
          print('      ‚úÖ $memberName - ${j == 0 ? 'Owner' : (j == 1 ? 'Admin' : 'Member')}');
          clubMemberCount++;
          
        } catch (e) {
          print('      ‚ùå $memberName: $e');
        }
      }
      print('');
    }

    // 6. C·∫≠p nh·∫≠t tournaments hi·ªán t·∫°i v·ªõi h√¨nh ·∫£nh
    print('üèÜ 5. C·∫¨P NH·∫¨T TOURNAMENTS:');
    print('===========================');
    
    final existingTournaments = await supabase
        .from('tournaments')
        .select('id, title, club_id');
    
    final tournamentImages = [
      'https://images.unsplash.com/photo-1571019613454-1cb2f99b2d8b?w=600&h=400&fit=crop',
      'https://images.unsplash.com/photo-1574631806042-182f10c4a017?w=600&h=400&fit=crop',
    ];
    
    for (int i = 0; i < existingTournaments.length; i++) {
      final tournament = existingTournaments[i];
      
      try {
        await supabase
            .from('tournaments')
            .update({
              'cover_image_url': tournamentImages[i % tournamentImages.length],
              'updated_at': DateTime.now().toIso8601String(),
            })
            .eq('id', tournament['id']);
        
        print('   ‚úÖ ${tournament['title']}: ƒê√£ th√™m h√¨nh ·∫£nh');
        
      } catch (e) {
        print('   ‚ùå ${tournament['title']}: $e');
      }
    }

    // 7. T·∫°o th√™m posts v·ªõi h√¨nh ·∫£nh t·ª´ members
    print('\nüìù 6. T·∫†O POSTS M·ªöI:');
    print('====================');
    
    final postTemplates = [
      {
        'content': 'üé± V·ª´a ho√†n th√†nh tr·∫≠n ƒë·∫•u tuy·ªát v·ªùi! C·∫£m ∆°n Golden Billiards Club ƒë√£ t·ªï ch·ª©c s·ª± ki·ªán hay! #BiAProud #GoldenBilliards',
        'image_url': 'https://images.unsplash.com/photo-1594736797933-d0601ba2fe65?w=500&h=300&fit=crop'
      },
      {
        'content': 'üèÜ Chu·∫©n b·ªã cho tournament s·∫Øp t·ªõi! Ai mu·ªën th·ª≠ th√°ch c√πng m√¨nh kh√¥ng? üí™ #Tournament #Challenge',
        'image_url': 'https://images.unsplash.com/photo-1571019613454-1cb2f99b2d8b?w=500&h=300&fit=crop'
      },
      {
        'content': '‚ú® Trick shot c·ªßa h√¥m nay! Luy·ªán t·∫≠p m√£i m·ªõi ƒë∆∞·ª£c pha n√†y üéØ #TrickShot #Practice',
        'image_url': 'https://images.unsplash.com/photo-1606107557195-0e29a4b5b4aa?w=500&h=300&fit=crop'
      },
      {
        'content': 'üéä SABO Arena Central - n∆°i tuy·ªát v·ªùi ƒë·ªÉ g·∫∑p g·ª° c√°c cao th·ªß! Atmosphere tuy·ªát v·ªùi! #SABOArena',
        'image_url': 'https://images.unsplash.com/photo-1574631806042-182f10c4a017?w=500&h=300&fit=crop'
      },
    ];

    int postCount = 0;
    for (int i = 0; i < postTemplates.length && i < createdUserIds.length; i++) {
      final post = postTemplates[i];
      final userId = createdUserIds[i];
      
      try {
        await supabase
            .from('posts')
            .insert({
              'user_id': userId,
              'content': post['content'],
              'image_url': post['image_url'],
              'created_at': DateTime.now().toIso8601String(),
            });
        
        print('   ‚úÖ Post ${i + 1}: ${post['content']?.substring(0, 30)}...');
        postCount++;
        
      } catch (e) {
        print('   ‚ùå Post ${i + 1}: $e');
      }
    }

    // 8. T·ªïng k·∫øt
    print('\nüìä 7. T·ªîNG K·∫æT:');
    print('================');
    print('   üë• Th√†nh vi√™n m·ªõi: $memberCount');
    print('   üè¢ Club members: $clubMemberCount');
    print('   üèÜ Tournament images: ${existingTournaments.length}');
    print('   üìù Posts m·ªõi: $postCount');
    
    // Ki·ªÉm tra d·ªØ li·ªáu cu·ªëi c√πng
    for (final club in clubs) {
      final members = await supabase
          .from('club_members')
          .select('user_id')
          .eq('club_id', club['id']);
          
      print('');
      print('   üè¢ ${club['name']}:');
      print('      üë• Total Members: ${members.length}');
      
      if (members.isNotEmpty) {
        final memberDetails = await supabase
            .from('users')
            .select('full_name, avatar_url')
            .inFilter('id', members.map((m) => m['user_id']).toList());
        
        for (final member in memberDetails) {
          print('      ‚Ä¢ ${member['full_name']} ${member['avatar_url'] != null ? 'üì∑' : ''}');
        }
      }
    }

    print('\nüéâ HO√ÄN TH√ÄNH TH√äM DATA!');
    print('   ‚úÖ Database c√≥ ƒë·∫ßy ƒë·ªß th√†nh vi√™n v·ªõi h√¨nh ·∫£nh ƒëa d·∫°ng');
    print('   ‚úÖ Tournaments ƒë√£ c√≥ cover images ch·∫•t l∆∞·ª£ng');
    print('   ‚úÖ Posts m·ªõi v·ªõi visual content h·∫•p d·∫´n'); 
    print('   ‚úÖ Tab "ƒë·ªëi th·ªß" s·∫Ω hi·ªÉn th·ªã nhi·ªÅu ng∆∞·ªùi ch∆°i v·ªõi avatars ƒë·∫πp!');

  } catch (e) {
    print('‚ùå L·ªñI: $e');
    exit(1);
  }

  exit(0);
}